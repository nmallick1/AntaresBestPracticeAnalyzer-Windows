param([string]$resourceToProcess, [string]$currDetectorName) #Must be the first statement in the script

<#
1. Make sure there are no spaces in the Detector script name. Place your Detector script within a folder with the same name as your detector script. You can then put this folder inside the \Detectors\Sites or Detectors\ASPs directory
For e.g.. The sample SlotsDetector.ps1 is a Sites Detector and its script is placed inside \Detectors\Sites\SlotsDetector\SlotsDetector.ps1

2. No individual Detector should take more than a few minutes to complete. It runs a risk of being terminated if it runs for a long time
Timeout for a Site detector is 6 minutes and for an ASP detector is 10 minutes

3. As a rule of thumb, if you are downloading any file that you need for your detector to function, download it in the Sites directory respresnted by $resourceToProcess instead of the directory in which your Detectory resides.
You may choose to clean up / leave the downloaded data as is. Just in case any other detectory needs it, it will already have it there.
Simillarly, if you need a file downloaded / some data, check for its presence. Chances are, some other detector might have already done the work for you


4. $resourceToProcess will have input in the following format
    C:\Projects\AntaresBestPracticeAnalyzer-Windows\Output\da511dea-6e00-4728-93ff-6302ad7fe284\Sites\da511dea-6e00-4728-93ff-6302ad7fe284_nmallickWebAppRG_nmallick1

5. Once done with the detector logic, create a file with the following naming convention and place it in the same folder as $resourceToProcess
    DetectorName.out.

    For e.g. If the detector's name is SlotsDetector, the output file generated by this detector should be SlotsDetector.out and should be placed at $resourceToProcess +"\SlotsDetector.out".
    $detectorOutputFile valiable already creates the complete file path for you.

    The output file should contain and output in the following JSON format

    {
    "SubscriptionId": "This should be the Subscription ID under which the current site resides",
    "ResourceGroupName": "This should be the resource grop name under which the current site resides",
    "ResourceName": "This should be either the name of the webapp or ASP that the detector is currently processing",
    "Kind": "Make sure value is one out of SiteDector | ASPDetector",
    "DetectorName": "SlotsDetector",
    "Author": "Feel free to addd your name and/or email address or simply state Anonymous"
    "Description": "In short, state which best practice does your detector checks against",
    "Result":{
        "Value": "Make sure value is one out of Pass | Fail | Warning",
        "Details": "Any string decribing what is the conclusion of your detector",
        "Recommendation": "What is your recommendation for this site and why",
        "AdditionalInfo":"Anything else that you want to point out goes here"
        }
    }

6. Add a small description of what your detector checks for / which best practice is it trying to look for in the corresponding ReadMe.txt. It will help people understand the intent of this detector.

7. There is a return statement in PlaceHolderDetector.ps1. Remove / Comment it before working on your detector. It is placed to ensure that the PlaceHolderDetecor does not run any logic if trigerred

8. The order in which Detectors will be invoked is not guaranteed, however they are certain to be invoked ONLY once per Site / ASP.
#>


#region Delete this section
    #Comment out / Remove the following return statement when you write your detector.
    #This return is placed just to make sure that the PlaceHolderDetecor does not end up creating an output file
    #----------------------------------------
        #return
    #----------------------------------------
#endregion  Delete this section


#region Do not change anything in this section
    $detectorOutputFile = $resourceToProcess + "\" + $currDetectorName  + ".out"

    if(Test-Path -Path $detectorOutputFile){
        #Output for this detector already exists. Must have been trigerred due to some bug / error. Do not run the detector logic again
        return
    }

    $temp = $resourceToProcess.Split('\')[$resourceToProcess.Split('\').Length-1]

    $subscriptionId = $temp.Split('_')[0]
    $resourceGroup = $temp.Split('_')[1]
    $resourceName = $temp.Split('_')[2]

    #The complete path of the JSON file that contains settings for this resource is $resourceToProcess + "\" + $settingsFileName
    $settingsFileName = $resourceName + ".json"

    #The complete path of the JSON file that contains config for this resource is $resourceToProcess + "\" + $configFileName
    $configFileName = $resourceName + ".config.json"

    #Initialize
    $adheringToBestPractice = $true
#endregion Do not change anything in this section

#region Code for your detector goes here

    $details = ""
    $recommendation = ""
    $additionalInfo = ""

    if(Test-Path -Path ($resourceToProcess+"\" + $resourceName + ".appsettings.json"))
    {
        #If appSettings are already present (possibly downloaded by some other detector), use it
        $appSettings = Get-Content -Path ($resourceToProcess+"\" + $resourceName + ".appsettings.json") | ConvertFrom-Json
    }
    else
    {
        $appSettingsURL = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $resourceGroup + "/providers/Microsoft.Web/sites/" + $resourceName + "/config/appsettings/list?api-version=2016-08-01"
        $appSettings = ARMClient.exe POST $appSettingsURL

        #Save the appSettings just in case any other detector wants to use it
        New-Item -ItemType File -Path ($resourceToProcess+"\" + $resourceName + ".appsettings.json") -Force >$null
        $appSettings | Out-File -FilePath ($resourceToProcess+"\" + $resourceName + ".appsettings.json") -Append  -Force
        $appSettings = $appSettings | ConvertFrom-Json
    }

    #Check to see what the current size of the web site is
    $siteContentSize = Armclient Get ("/subscriptions/" + $subscriptionId + "/resourceGroups/" + $resourceGroup + "/providers/Microsoft.Web/sites/" + $resourceName + "/usages?api-version=2016-08-01") | ConvertFrom-Json
    $siteContentSize =  ($siteContentSize.value | Where-Object {$_.name.value -contains "FileSystemStorage"}).currentValue


    if($appSettings.properties.WEBSITE_LOCAL_CACHE_OPTION -ceq "Always")
    {
        #Site content is more than 2 GB, LocalCache will fail irrespective of what values are configured
        if($siteContentSize -gt (2 *1024 * 1024 * 1024))
        {
            $adheringToBestPractice = $false

            $details = "Even though LocalCache is enabled, it will fail as the current site content exceeds the maximum allowed Local Cache limit of 2 GB on disk"
            $recommendation = "Ensure that the size of this application is less than 2 GB."
            $additionalInfo = "For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
        }
        else
        {
            #Check to see if DynamicCache is also enabled
            if(($appSettings.properties.WEBSITE_DYNAMIC_CACHE -eq $null) -or ($appSettings.properties.WEBSITE_DYNAMIC_CACHE -eq 0))
            {
                #Local Cache is enabled and Dynamic Cache is NOT enabled
                #Check to see if the LocalCache size is specified or is the default being considered

            
                $configuredLocalCacheSize = $appSettings.properties.WEBSITE_LOCAL_CACHE_SIZEINMB *1024 * 1024
                if($configuredLocalCacheSize -eq $null)
                {
                    #Local Cache size app setting was not configured. Consider the default value of 300 MB
                    $configuredLocalCacheSize = 300 * 1024 * 1024
                }
                else
                {
                    #Make sure that the appSetting is not greater than 2GB which is the max value that this setting takes up
                    if($configuredLocalCacheSize -gt (2 * 1024 *1024 * 1024))
                    {
                        $configuredLocalCacheSize = (2 * 1024 *1024 * 1024)
                    }
                }
            
                if($siteContentSize -eq $null)
                {
                    #There was a problem trying to get the size content of the webapp
                    #Flag a message saying that we were unable to get the size content. Perhaps running the analyzer will get the site content and give the correct result
                    # Alternatively, the user may simply check to see that the site's content is less than 1.2 GB to avoid issues
                    $adheringToBestPractice = $false
                
                    if($appSettings.properties.WEBSITE_LOCAL_CACHE_SIZEINMB -eq $null)
                    {
                        #Local Cache is enabled
                        #Dynamic Cache is disabled
                        #Couldn't get Site content size 
                        #Local Cache size is default 300 MB

                        $details = "There was an error trying to retrieve the size of this application."
                        $recommendation = "Ensure that the size of this application does not exceed the default allowed LocalCache limit of 300 MB on disk."
                        $additionalInfo = "If the size of this application exceeds the default allowed LocalCache limit of 300 MB on disk, LocalCache will fail even though it has been configured. For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
                    }
                    else
                    {
                        #Local Cache is enabled
                        #Dynamic Cache is disabled
                        #Couldn't get Site content size 
                        #Local Cache size is configured via AppSetting

                        $details = "There was an error trying to retrieve the size of this application."
                        $recommendation = "Ensure that the size of this application does not exceed " + [math]::Round(((($configuredLocalCacheSize)/1024)/1024),3) + " MB on disk."
                        $additionalInfo = "If the size of this application exceeds " + [math]::Round(((($configuredLocalCacheSize)/1024)/1024),3) + " MB on disk, LocalCache will fail even though it has been configured. For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
                    }
                }
                else
                {
                    if($siteContentSize -gt $configuredLocalCacheSize)
                    {
                        #LocalCache is enabled however it will fail as the site content size is larger than what is cofigured for local cache
                        $adheringToBestPractice = $false

                        if($appSettings.properties.WEBSITE_LOCAL_CACHE_SIZEINMB -eq $null)
                        {
                            #Local Cache is enabled
                            #Dynamic Cache is disabled
                            #Site content size > default 300 MB LocalCache size limit

                            $details = "Even though LocalCache is enabled, it will fail as the current site content exceeds the default allowed LocalCache limit of 300 MB on disk"
                            $recommendation = "Ensure that the size of this application is less than 300 MB or increase the LocalCache limit up to 2 GB by configuring the WEBSITE_LOCAL_CACHE_SIZEINMB App Setting."
                            $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB. For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
                        }
                        else
                        {
                            #Local Cache is enabled
                            #Dynamic Cache is disabled
                            #Site content size > configured LocalCache size limit

                            #Since we have already verified that the site content size < 2 GB, it is fine to suggest increasing the value of WebsiteLocalCacheSizeInMB
                            $details = "Even though LocalCache is enabled, it will fail as the current site content exceeds the configured value in WEBSITE_LOCAL_CACHE_SIZEINMB AppSetting"
                            $recommendation = "Ensure that the size of this application does not exceed " + ((($configuredLocalCacheSize)/1024)/1024) + " MB on disk or increase the limit set in WEBSITE_LOCAL_CACHE_SIZEINMB AppSetting."
                            $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB. For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
                        }
                    }
                    else
                    {
                        #Even though the site content size is less than the configured local cache size, make sure that the site content does not cross 1.2 GB as it will cause issues later
                        if($siteContentSize -gt (1.2 *1024 * 1024 * 1024))
                        {
                            #LocalCache is enabled
                            #DynamicCache is disabled
                            #site is >1.2 GB and <2 GB in size
                            $adheringToBestPractice = $false

                            $details = "Although LocalCache is working for this site, current web app size is greater than 1.2 GB on disk and LocalCache refresh may occassionally timeout in case of storage latencies."
                            $recommendation = "Ensure that the size of this application does not exceed 1.2 GB on disk."
                            $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB. Even though LocalCache is enabled and the size of this application is under the value set in WEBSITE_LOCAL_CACHE_SIZEINMB AppSetting, please work on getting the application size to under 1.2 GB as it populating LocalCache may timeout occassionally due to storage / disk latencies."
                        }
                        else
                        {
                            #LocalCache is enabled
                            #DynamicCache is disabled
                            #site is <1.2 GB in size
                            #Site checks out for everything... All Good
                            $adheringToBestPractice = $true

                            $details = "LocalCache is enabled for this site"
                            $recommendation = ""
                            $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB. For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
                        }
                    }
                }
            } #endif(($appSettings.properties.WEBSITE_DYNAMIC_CACHE -eq $null) -or ($appSettings.properties.WEBSITE_DYNAMIC_CACHE -eq 0))
            else
            {
                #Local Cache is enabled
                #Dynamic Cache is enabled
                $adheringToBestPractice = $false

                $details = "Both Local Cache and Dynamic Cache are enabled via AppSettings WEBSITE_LOCAL_CACHE_OPTION and WEBSITE_DYNAMIC_CACHE respectively."
                $recommendation = "Please ensure that only one out of Dynamic Cache or Local Cache is enabled per site."
                $additionalInfo = "For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview and https://github.com/projectkudu/kudu/wiki/Configurable-settings"
            }
        }
    } #endif($appSettings.properties.WEBSITE_LOCAL_CACHE_OPTION -eq "Always")
    else
    {
        #LocalCache is not enabled

        #Check to see if DynamicCache is enabled for the site
        if(($appSettings.properties.WEBSITE_DYNAMIC_CACHE -eq 1) -or ($appSettings.properties.WEBSITE_DYNAMIC_CACHE -eq 2))
        {
            #LocalCache is disabled however DynamicCache is enabled for this site. So this is fine
            $adheringToBestPractice = $true


            if($siteContentSize -eq $null)
            {
                #Local Cache is disabled
                #Dynamic Cache is enabled
                #Couldn't get site content size
                $adheringToBestPractice = $false

                $details = "Dynamic Cache is enabled for this site."
                $recommendation = "There was an error retrieving the size of this application to ensure that the size of the application is less than 2 GB on disk."
                $additionalInfo = ""
            }
            else
            {
                if($siteContentSize -gt (2 * 1024 *1024 * 1024))
                {
                    #Local Cache is disabled
                    #Dynamic Cache is enabled
                    #Site content is more than 2 GB
                    $adheringToBestPractice = $false

                    $details = "Ensure that the site content is less than 2 GB."
                    $recommendation = "Ensure that the size of the application is less than 2 GB on disk."
                    $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB."
                }
                else
                {
                    #Site content is less than 2 GB, local cache is not enabled and dynamic Cache is enabled

                    $details = "Local Cache is disabled and Dynamic Cache is enabled for this site."

                    if($siteContentSize -gt (1.2 * 1024 *1024 * 1024))
                    {
                        #Suggest to reduce the size of the application to under 1.2 GB to avoid issues later
                        $adheringToBestPractice = $false
                        $details = "Application size is greater than 1.2 GB and Cache refresh may occassionally timeout in case of storage latencies."
                        $recommendation = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB. For better performance, ensure that the size of this application does not exceed 1.2 GB on disk."

                        $additionalInfo = ""
                    }
                    else
                    {
                        #Dynamic Cache is enabled
                        #Local Cache is disabled 
                        #Application size is < 1.2 GB. All Good

                        $adheringToBestPractice = $true
                        $recommendation = ""
                        $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB."
                    }
                }
            }            
        }
        else
        {
            #LocalCache and DynamicCache are disabled for this site.

            if($siteContentSize -eq $null)
            {
                #Local Cache and Dynamic Cache are disabled for this site
                #Unable to identify the site's content size

                #There was a problem trying to get the size content of the webapp however we do know that LocalCache was not enabled for this site. Display a message accordingly
                #Flag a message saying that we were unable to get the size content. Perhaps running the analyzer will get the site content and give the correct result
                # Alternatively, the user may simply check to see that the site's content is less than 1.2 GB to avoid issues
                $adheringToBestPractice = $false

                $details = "There was an error while calculating the size of this application."
                $recommendation = "If the size of the application is less than 2 GB on disk, please enable LocalCache for this site."
                $additionalInfo = "For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"

            }
            else
            {
                if($siteContentSize -gt (2 * 1024 *1024 * 1024))
                {
                    #Site content is more than 2 GB so there is no point in enabling LocalCache for this site
                    $adheringToBestPractice = $true

                    $details = "Local Cache and DynamicCache are not enabled on this site, site is more than 2 GB in size."
                    $recommendation = ""
                    $additionalInfo = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB."
                }
                else
                {
                    #Site content is less than 2 GB however
                    #Both local cache and dynamic cache are not enabled. It can be enabled for this site
                    $adheringToBestPractice = $false

                    $details = "Please enable Local Cache for this site"
                    $additionalInfo = "For more information, refer to https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache-overview"
                    $recommendation = "Current size on disk is " + [math]::Round((($siteContentSize/1024)/1024),3)  + " MB. For better performance, please ensure that the application size remains under 1.2 GB"                    
                }
            }
        }
    }


#endregion  Code for your detector goes here

#region Generate output for the detector
    #region Modify the text in variables as appropriate
        If($adheringToBestPractice){
            #Enter this block if you logic found that the best practice you are checking for is already implemented for this site
            $detectorResult = @{
                'Value'='Pass';
                'Details'=$details;
                'Recommendation'=$recommendation;
                'AdditionalInfo'=$additionalInfo
                }
        }
        else
        {
            #Enter this block if you logic found that the best practice you are checking for is already implemented for this site
            $detectorResult = @{
                'Value'='Fail';
                'Details'=$details;
                'Recommendation'=$recommendation;
                'AdditionalInfo'=$additionalInfo
                }
        }




        #region Generating output for the detector
        $outputObj = New-Object System.Object
        $outputObj  | Add-Member -MemberType NoteProperty -Name SubscriptionId -Value $subscriptionId
        $outputObj  | Add-Member -MemberType NoteProperty -Name ResourceGroupName -Value $resourceGroup
        $outputObj  | Add-Member -MemberType NoteProperty -Name ResourceName -Value $resourceName
        $outputObj  | Add-Member -MemberType NoteProperty -Name Kind -Value "SiteDetector"
        $outputObj  | Add-Member -MemberType NoteProperty -Name DetectorName -Value $currDetectorName
        $outputObj  | Add-Member -MemberType NoteProperty -Name Author -Value "Nazeef Mallick (nmallick@microsoft.com)"
        $outputObj  | Add-Member -MemberType NoteProperty -Name Description -Value "Check to see if Local Cache is applicable for the current site"
        $outputObj  | Add-Member -MemberType NoteProperty -Name Result -Value $detectorResult



    #endregion  Modify the text in variables as appropriate

    #region Write output to .out file
        #Create a placeholder file
        New-Item -ItemType File -Path $detectorOutputFile -Force >$null

        #Write the properties of this website into its corresponding file
        $outputObj | ConvertTo-Json | Out-File -FilePath $detectorOutputFile -Append  -Force
    #endregion Write output to .out file
#endregion  Generate output for the detector